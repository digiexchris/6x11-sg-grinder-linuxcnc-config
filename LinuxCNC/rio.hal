# load the realtime components
loadrt [KINS]KINEMATICS
loadrt [EMCMOT]EMCMOT base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS num_dio=[EMCMOT]NUM_DIO num_aio=[EMCMOT]NUM_AIO
loadrt rio

loadrt pid num_chan=6
addf pid.0.do-pid-calcs servo-thread
addf pid.1.do-pid-calcs servo-thread
addf pid.2.do-pid-calcs servo-thread
addf pid.3.do-pid-calcs servo-thread
addf pid.4.do-pid-calcs servo-thread
addf pid.5.do-pid-calcs servo-thread

# add the rio and motion functions to threads
addf motion-command-handler servo-thread
addf motion-controller servo-thread
addf rio.readwrite servo-thread

#loadusr -W hal_manualtoolchange


# user-enable-out
net user-enable-out <= iocontrol.0.user-enable-out
net user-enable-out => rio.sys-enable

# user-request-enable
net user-request-enable <= iocontrol.0.user-request-enable
net user-request-enable => rio.sys-enable-request

# iocontrol-0-emc-enable-in
net iocontrol-0-emc-enable-in <= rio.sys-status
net iocontrol-0-emc-enable-in => iocontrol.0.emc-enable-in

# tool-prep-number
#net tool-prep-number <= iocontrol.0.tool-prep-number
#net tool-prep-number => hal_manualtoolchange.number

# tool-change
#net tool-change <= iocontrol.0.tool-change
#net tool-change => hal_manualtoolchange.change

# tool-changed
#net tool-changed <= hal_manualtoolchange.changed
#net tool-changed => iocontrol.0.tool-changed

# tool-prepared
#net tool-prepared <= iocontrol.0.tool-prepare
#net tool-prepared => iocontrol.0.tool-prepared

# riov-riotime-value
net riov-riotime-value <= rio.readwrite.time

# pyvcp-halui-mdi-command-00
#net pyvcp-halui-mdi-command-00 => halui.mdi-command-00

# pyvcp-halui-mdi-command-01
#net pyvcp-halui-mdi-command-01 => halui.mdi-command-01

# pyvcp-halui-mdi-command-02
#net pyvcp-halui-mdi-command-02 => halui.mdi-command-02

# pyvcp-halui-mdi-command-03
#net pyvcp-halui-mdi-command-03 => halui.mdi-command-03

# pyvcp-halui-mdi-command-04
#net pyvcp-halui-mdi-command-04 => halui.mdi-command-04

# pyvcp-halui-mdi-command-05
#net pyvcp-halui-mdi-command-05 => halui.mdi-command-05

# pyvcp-enable-bit
net pyvcp-enable-bit => rio.enable.bit

# pyvcp-Output1-bit
net pyvcp-Output1-bit => rio.Output1.bit

# pyvcp-Output2-bit
net pyvcp-Output2-bit => rio.Output2.bit

# pyvcp-LED-bit
net pyvcp-LED-bit => rio.LED.bit

# pyvcp-Input1-bit
net pyvcp-Input1-bit <= rio.Input1.bit

# pyvcp-Input2-bit
net pyvcp-Input2-bit <= rio.Input2.bit

# pyvcp-Input3-bit
net pyvcp-Input3-bit <= rio.Input3.bit

# pyvcp-Input4-bit
net pyvcp-Input4-bit <= rio.Input4.bit

# pyvcp-Input5-bit
net pyvcp-Input5-bit <= rio.Input5.bit

# pyvcp-Input6-bit
net pyvcp-Input6-bit <= rio.Input6.bit

# pyvcp-Input7-bit
net pyvcp-Input7-bit <= rio.Input7.bit

# pyvcp-Input8-bit
net pyvcp-Input8-bit <= rio.Input8.bit

# setp

# Axis: X

# joint.0: relative positioning using pid.0
setp pid.0.Pgain     [JOINT_0]P
setp pid.0.Igain     [JOINT_0]I
setp pid.0.Dgain     [JOINT_0]D
setp pid.0.bias      [JOINT_0]BIAS
setp pid.0.FF0       [JOINT_0]FF0
setp pid.0.FF1       [JOINT_0]FF1
setp pid.0.FF2       [JOINT_0]FF2
setp pid.0.deadband  [JOINT_0]DEADBAND
setp pid.0.maxoutput [JOINT_0]MAXOUTPUT
setp rio.Stepper1.velocity-scale [JOINT_0]SCALE_OUT
setp rio.Stepper1.position-scale [JOINT_0]SCALE_IN
net j0vel-cmd <= pid.0.output
net j0vel-cmd => rio.Stepper1.velocity
net j0pos-cmd <= joint.0.motor-pos-cmd
net j0pos-cmd => pid.0.command
net j0pos-fb  <= rio.Stepper1.position
net j0pos-fb  => joint.0.motor-pos-fb
net j0pos-fb  => pid.0.feedback
net j0enable  <= joint.0.amp-enable-out
net j0enable  => rio.Stepper1.enable
net j0enable  => pid.0.enable

# Axis: Y

# joint.1: relative positioning using pid.1
setp pid.1.Pgain     [JOINT_1]P
setp pid.1.Igain     [JOINT_1]I
setp pid.1.Dgain     [JOINT_1]D
setp pid.1.bias      [JOINT_1]BIAS
setp pid.1.FF0       [JOINT_1]FF0
setp pid.1.FF1       [JOINT_1]FF1
setp pid.1.FF2       [JOINT_1]FF2
setp pid.1.deadband  [JOINT_1]DEADBAND
setp pid.1.maxoutput [JOINT_1]MAXOUTPUT
setp rio.Stepper2.velocity-scale [JOINT_1]SCALE_OUT
setp rio.Stepper2.position-scale [JOINT_1]SCALE_IN
net j1vel-cmd <= pid.1.output
net j1vel-cmd => rio.Stepper2.velocity
net j1pos-cmd <= joint.1.motor-pos-cmd
net j1pos-cmd => pid.1.command
net j1pos-fb  <= rio.Stepper2.position
net j1pos-fb  => joint.1.motor-pos-fb
net j1pos-fb  => pid.1.feedback
net j1enable  <= joint.1.amp-enable-out
net j1enable  => rio.Stepper2.enable
net j1enable  => pid.1.enable

# Axis: Z

# joint.2: relative positioning using pid.2
setp pid.2.Pgain     [JOINT_2]P
setp pid.2.Igain     [JOINT_2]I
setp pid.2.Dgain     [JOINT_2]D
setp pid.2.bias      [JOINT_2]BIAS
setp pid.2.FF0       [JOINT_2]FF0
setp pid.2.FF1       [JOINT_2]FF1
setp pid.2.FF2       [JOINT_2]FF2
setp pid.2.deadband  [JOINT_2]DEADBAND
setp pid.2.maxoutput [JOINT_2]MAXOUTPUT
setp rio.Stepper3.velocity-scale [JOINT_2]SCALE_OUT
setp rio.Stepper3.position-scale [JOINT_2]SCALE_IN
net j2vel-cmd <= pid.2.output
net j2vel-cmd => rio.Stepper3.velocity
net j2pos-cmd <= joint.2.motor-pos-cmd
net j2pos-cmd => pid.2.command
net j2pos-fb  <= rio.Stepper3.position
net j2pos-fb  => joint.2.motor-pos-fb
net j2pos-fb  => pid.2.feedback
net j2enable  <= joint.2.amp-enable-out
net j2enable  => rio.Stepper3.enable
net j2enable  => pid.2.enable

# Axis: A

# joint.3: relative positioning using pid.3
setp pid.3.Pgain     [JOINT_3]P
setp pid.3.Igain     [JOINT_3]I
setp pid.3.Dgain     [JOINT_3]D
setp pid.3.bias      [JOINT_3]BIAS
setp pid.3.FF0       [JOINT_3]FF0
setp pid.3.FF1       [JOINT_3]FF1
setp pid.3.FF2       [JOINT_3]FF2
setp pid.3.deadband  [JOINT_3]DEADBAND
setp pid.3.maxoutput [JOINT_3]MAXOUTPUT
setp rio.Stepper4.velocity-scale [JOINT_3]SCALE_OUT
setp rio.Stepper4.position-scale [JOINT_3]SCALE_IN
net j3vel-cmd <= pid.3.output
net j3vel-cmd => rio.Stepper4.velocity
net j3pos-cmd <= joint.3.motor-pos-cmd
net j3pos-cmd => pid.3.command
net j3pos-fb  <= rio.Stepper4.position
net j3pos-fb  => joint.3.motor-pos-fb
net j3pos-fb  => pid.3.feedback
net j3enable  <= joint.3.amp-enable-out
net j3enable  => rio.Stepper4.enable
net j3enable  => pid.3.enable

# Axis: C

# joint.4: relative positioning using pid.4
setp pid.4.Pgain     [JOINT_4]P
setp pid.4.Igain     [JOINT_4]I
setp pid.4.Dgain     [JOINT_4]D
setp pid.4.bias      [JOINT_4]BIAS
setp pid.4.FF0       [JOINT_4]FF0
setp pid.4.FF1       [JOINT_4]FF1
setp pid.4.FF2       [JOINT_4]FF2
setp pid.4.deadband  [JOINT_4]DEADBAND
setp pid.4.maxoutput [JOINT_4]MAXOUTPUT
setp rio.Stepper5.velocity-scale [JOINT_4]SCALE_OUT
setp rio.Stepper5.position-scale [JOINT_4]SCALE_IN
net j4vel-cmd <= pid.4.output
net j4vel-cmd => rio.Stepper5.velocity
net j4pos-cmd <= joint.4.motor-pos-cmd
net j4pos-cmd => pid.4.command
net j4pos-fb  <= rio.Stepper5.position
net j4pos-fb  => joint.4.motor-pos-fb
net j4pos-fb  => pid.4.feedback
net j4enable  <= joint.4.amp-enable-out
net j4enable  => rio.Stepper5.enable
net j4enable  => pid.4.enable

# Axis: B

# joint.5: relative positioning using pid.5
setp pid.5.Pgain     [JOINT_5]P
setp pid.5.Igain     [JOINT_5]I
setp pid.5.Dgain     [JOINT_5]D
setp pid.5.bias      [JOINT_5]BIAS
setp pid.5.FF0       [JOINT_5]FF0
setp pid.5.FF1       [JOINT_5]FF1
setp pid.5.FF2       [JOINT_5]FF2
setp pid.5.deadband  [JOINT_5]DEADBAND
setp pid.5.maxoutput [JOINT_5]MAXOUTPUT
setp rio.Stepper6.velocity-scale [JOINT_5]SCALE_OUT
setp rio.Stepper6.position-scale [JOINT_5]SCALE_IN
net j5vel-cmd <= pid.5.output
net j5vel-cmd => rio.Stepper6.velocity
net j5pos-cmd <= joint.5.motor-pos-cmd
net j5pos-cmd => pid.5.command
net j5pos-fb  <= rio.Stepper6.position
net j5pos-fb  => joint.5.motor-pos-fb
net j5pos-fb  => pid.5.feedback
net j5enable  <= joint.5.amp-enable-out
net j5enable  => rio.Stepper6.enable
net j5enable  => pid.5.enable
